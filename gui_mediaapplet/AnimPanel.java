/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui_mediaapplet;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Shape;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Ellipse2D;
import javax.swing.Timer;

/**
 *
 * @author Soroush
 */
public class AnimPanel extends javax.swing.JPanel implements ActionListener, MouseMotionListener {

    private Timer timer;
    private Point targetPosition;
    private Point currentPosition;
    private Shape shape;
    private double m;
    private int b;
    private int delay;
    private Paint shapePaint;
    
    /**
     * Creates new form AnimPanel
     */
    public AnimPanel() {
        initComponents();
        addMouseMotionListener(this);
        currentPosition = new Point(0, 0);
        targetPosition = new Point(0, 0);
        shape = new Ellipse2D.Double(0, 0, 20, 20);
        shapePaint = Color.red;
        delay = 10;
        timer = new Timer(delay, this);
        timer.start();
    }
    
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D)g;
        g2.setPaint(shapePaint);
        g2.translate(currentPosition.x, currentPosition.y);
        g2.fill(shape);
    }

    public Shape getShape() {
        return shape;
    }

    public void setShape(Shape shape) {
        this.shape = shape;
    }

    public int getDelay() {
        return delay;
    }

    public void setDelay(int delay) {
        this.delay = delay;
        timer.setDelay(delay);
    }

    public Paint getShapePaint() {
        return shapePaint;
    }

    public void setShapePaint(Paint shapePaint) {
        this.shapePaint = shapePaint;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        
        if (currentPosition.x == targetPosition.x && currentPosition.y == targetPosition.y) {
            return;
        }
        
        if (m == Double.POSITIVE_INFINITY) {
            currentPosition.y++;
        }
        else if (m == Double.NEGATIVE_INFINITY) {
            currentPosition.y--;
        }
        else if (targetPosition.x > currentPosition.x) {
            currentPosition.x++;
            currentPosition.y = (int)(currentPosition.x * m) + b;
        }
        else if (targetPosition.x < currentPosition.x) {
            currentPosition.x--;
            currentPosition.y = (int)(currentPosition.x * m) + b;
        }
        
        repaint();
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        
    }

    @Override
    public void mouseMoved(MouseEvent e) {
        
        targetPosition = e.getPoint();
        
        if (targetPosition.x - currentPosition.x == 0) {
            m = (targetPosition.y > currentPosition.y ?
                    Double.POSITIVE_INFINITY : Double.NEGATIVE_INFINITY);
        }
        else {
            m = (double)(targetPosition.y - currentPosition.y) /
                    (targetPosition.x - currentPosition.x);
        }
        
        b = (int)(targetPosition.y - m * targetPosition.x);
    }
}
